name: Build and run application (MongoDB, ML Client, Web App, and entire application)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.stats()'" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Test ML Client
      - name: Install ML Client dependencies
        working-directory: machine-learning-client
        run: pip install pipenv && pipenv install --dev

      - name: Run ML Client tests
        working-directory: machine-learning-client
        run: |
          pipenv run python -c "
          print('Machine Learning Client environment OK');
          "

      # Test Web App
      - name: Install Web App dependencies
        working-directory: web-app
        run: pip install pipenv && pipenv install --dev

      - name: Run Web App smoke test
        working-directory: web-app
        run: |
          pipenv run python -c "
          import requests, time
          for _ in range(5):
              try:
                  r = requests.get('http://localhost:5001')
                  if r.status_code == 200:
                      print('Web App responded with 200 OK')
                      break
              except Exception as e:
                  print('Waiting for web app...')
                  time.sleep(5)
          else:
              raise Exception('Web App did not start in time')
          "

      # Run Full System
      - name: Build and run Docker Compose
        run: docker-compose up --build -d

      - name: Test all services together
        run: curl --retry 5 --retry-delay 5 --fail http://localhost:5001

      - name: Tear down
        run: docker-compose down -v
